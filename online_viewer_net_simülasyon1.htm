<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Kuluçka Kontrol Sistemi</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Boxicons CSS for Icons -->
    <link href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css" rel="stylesheet">
    <!-- Google Fonts - Inter -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary: #2b50aa;
            --secondary: #ffc947;
            --success: #28a745;
            --warning: #ffc107;
            --danger: #dc3545;
            --dark-blue: #1a237e;
            --light-bg: #f5f7fa;
            --card-bg: #ffffff;
            --text-color: #333;
            --text-muted: #6c757d;
        }

        body {
            background: var(--light-bg);
            min-height: 100vh;
            font-family: "Inter", sans-serif;
            color: var(--text-color);
            padding-bottom: 60px; /* Footer için boşluk */
        }

        .navbar {
            background: linear-gradient(45deg, var(--primary), var(--dark-blue));
            padding: 1rem 0;
            border-bottom-left-radius: 20px;
            border-bottom-right-radius: 20px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }

        .navbar-brand {
            color: #fff !important;
            font-size: 1.8rem;
            font-weight: 700;
            letter-spacing: 1px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .tab-container {
            background: var(--card-bg);
            border-radius: 20px;
            padding: 25px;
            box-shadow: 0 8px 30px rgba(0,0,0,0.1);
            margin-bottom: 30px;
            overflow: hidden;
        }

        .nav-tabs {
            border: none;
            margin-bottom: 25px;
            justify-content: center;
            background: #f0f4f8;
            border-radius: 15px;
            padding: 5px;
        }

        .nav-tabs .nav-link {
            border: none;
            color: var(--text-muted);
            font-weight: 600;
            padding: 12px 25px;
            border-radius: 12px;
            margin: 0 5px;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            font-size: 1.05rem;
        }

        .nav-tabs .nav-link.active {
            background: var(--primary);
            color: white;
            box-shadow: 0 5px 15px rgba(43, 80, 170, 0.4);
            transform: translateY(-2px);
        }
        
        .value-box {
            background: linear-gradient(45deg, var(--primary), var(--dark-blue));
            color: white;
            border-radius: 15px;
            padding: 20px;
            text-align: center;
            margin-bottom: 20px;
            box-shadow: 0 6px 15px rgba(0,0,0,0.2);
            transition: transform 0.3s ease;
        }

        .value-box:hover {
            transform: translateY(-5px) scale(1.02);
        }

        .value-box .value {
            font-size: 3rem;
            font-weight: bold;
        }

        .value-box .label {
            font-size: 1.1rem;
            opacity: 0.9;
        }
        
        .value-box .icon-emoji {
            font-size: 3rem;
        }

        .control-btn {
            width: 90px;
            height: 90px;
            border-radius: 50%;
            border: none;
            background: white;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            margin: 15px;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
        }
        
        .control-btn .icon-emoji {
            font-size: 3rem;
        }

        .control-btn:hover {
            transform: translateY(-8px) scale(1.1);
            box-shadow: 0 8px 25px rgba(0,0,0,0.2);
        }
        
        #lightBtn.active {
            background: var(--secondary);
            box-shadow: 0 4px 15px rgba(255, 201, 71, 0.5);
        }
        #lightBtn.active .icon-emoji { color: white; }

        #turnBtn.active {
            background: var(--success);
            box-shadow: 0 4px 15px rgba(40, 167, 69, 0.4);
        }
        #turnBtn.active .icon-emoji { color: white; }
        
        .settings-card {
            background: var(--card-bg);
            border-radius: 15px;
            padding: 30px;
            margin-bottom: 25px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        }

        .time-display {
            background: rgba(255,255,255,0.2);
            padding: 10px 20px;
            border-radius: 15px;
            color: white;
            font-size: 1rem;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .form-control:focus {
            border-color: var(--primary);
            box-shadow: 0 0 0 0.25rem rgba(43, 80, 170, 0.25);
        }
        
        .ota-update-btn {
            padding: 12px 30px;
            font-size: 1.1rem;
            border-radius: 10px;
            background-color: var(--primary);
            color: white;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(43, 80, 170, 0.3);
            display: inline-flex;
            align-items: center;
            gap: 10px;
            font-weight: 600;
            border: none;
        }

        .ota-update-btn:hover {
            background-color: var(--dark-blue);
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(43, 80, 170, 0.4);
        }

        .ota-update-btn .button-icon {
            font-size: 1.5rem;
        }
        
        /* Yenilenmiş Bilgi Sayfası */
        .info-page-card {
            background: linear-gradient(135deg, #e6f2ff, #d0e7ff);
            border-radius: 20px;
            padding: 40px;
            box-shadow: 0 8px 30px rgba(0,0,0,0.1);
            margin-top: 20px;
            text-align: center;
            border: 1px solid rgba(255,255,255,0.5);
        }

        .info-page-card .company-logo {
            font-size: 4rem;
            color: var(--primary);
            margin-bottom: 1rem;
            display: inline-block;
            background: -webkit-linear-gradient(45deg, var(--primary), var(--dark-blue));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .info-page-card .company-name {
            font-size: 2rem;
            font-weight: 700;
            color: var(--dark-blue);
            margin-bottom: 2rem;
        }

        .info-page-card .contact-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1.5rem;
            margin-top: 2rem;
        }

        .info-page-card .contact-item {
            background: rgba(255, 255, 255, 0.6);
            padding: 1.5rem;
            border-radius: 15px;
            transition: all 0.3s ease;
        }
        
        .info-page-card .contact-item:hover {
            transform: translateY(-5px);
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }

        .info-page-card .contact-item i {
            font-size: 2rem;
            color: var(--primary);
            margin-bottom: 0.5rem;
        }
        
        .info-page-card .contact-item .contact-label {
            font-weight: 600;
            color: var(--dark-blue);
            display: block;
        }

        .info-page-card .contact-item a {
            color: var(--primary);
            text-decoration: none;
            font-weight: 500;
        }
        
        .info-page-card .contact-item a:hover {
            text-decoration: underline;
        }

        .ota-btn-container {
            text-align: center;
            margin-top: 2rem;
        }
        
        .footer {
            position: fixed;
            bottom: 0;
            width: 100%;
            background-color: #e9ecef;
            color: var(--text-muted);
            text-align: center;
            padding: 10px 0;
            font-size: 0.9rem;
            border-top: 1px solid #dee2e6;
        }

        .kulucka-takip-box, .cihaz-durumu-box { background: #e6f2ff; border-radius: 18px; padding: 25px; box-shadow: 0 4px 15px rgba(0,0,0,0.08); color: #333; margin-top: 25px; }
        .kulucka-takip-box h5, .cihaz-durumu-box h5 { color: var(--primary); font-weight: 700; margin-bottom: 20px; font-size: 1.4rem; }
        .calibration-info-box { background: #fff8e1; border-left: 5px solid var(--warning); border-radius: 10px; padding: 15px 20px; margin-bottom: 25px; }
        .collapsible-section { opacity: 0; max-height: 0; overflow: hidden; transition: max-height 0.5s ease-out, opacity 0.5s ease-out; }
        .collapsible-section.show { opacity: 1; max-height: 500px; /* İçerik sığması için artırıldı */ margin-top: 1rem; padding-top: 1rem; }
        .toast-container { z-index: 9999; position: fixed; top: 20px; right: 20px; }
    </style>
</head>
<body>
    <!-- Navbar -->
    <nav class="navbar navbar-dark mb-4">
        <div class="container">
            <a class="navbar-brand" href="#">
                <i class='bx bxl-sketch'></i> KULUÇKA KONTROL SİSTEMİ
            </a>
            <div class="time-display">
                <i class='bx bx-time'></i>
                <span id="currentTime">--:--:--</span>
            </div>
        </div>
    </nav>

    <div class="container">
        <div class="tab-container">
            <!-- Sekme Navigasyonu -->
            <ul class="nav nav-tabs" id="myTab" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="monitoring-tab" data-bs-toggle="tab" data-bs-target="#monitoring" type="button" role="tab" aria-controls="monitoring" aria-selected="true">
                        <span class="icon-emoji">📊</span> İzleme
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="settings-tab" data-bs-toggle="tab" data-bs-target="#settings" type="button" role="tab" aria-controls="settings" aria-selected="false">
                        <span class="icon-emoji">⚙️</span> Ayarlar
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="calibration-tab" data-bs-toggle="tab" data-bs-target="#calibration" type="button" role="tab" aria-controls="calibration" aria-selected="false">
                        <span class="icon-emoji">⚖️</span> Kalibrasyon
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="system-tab" data-bs-toggle="tab" data-bs-target="#system" type="button" role="tab" aria-controls="system" aria-selected="false">
                        <span class="icon-emoji">💻</span> Sistem
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="info-tab" data-bs-toggle="tab" data-bs-target="#info" type="button" role="tab" aria-controls="info" aria-selected="false">
                        <span class="icon-emoji">ℹ️</span> Bilgi
                    </button>
                </li>
            </ul>

            <!-- Sekme İçerikleri -->
            <div class="tab-content" id="myTabContent">
                <!-- İzleme Sekmesi -->
                <div class="tab-pane fade show active" id="monitoring" role="tabpanel" aria-labelledby="monitoring-tab">
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <div class="value-box">
                                <span class="icon-emoji">🌡️</span>
                                <div class="value" id="currentTemp">--.--°C</div>
                                <div class="label">Sıcaklık</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="value-box">
                                <span class="icon-emoji">💧</span>
                                <div class="value" id="currentHum">--.--%</div>
                                <div class="label">Nem</div>
                            </div>
                        </div>
                    </div>
                    <div class="text-center mb-4">
                        <button class="control-btn" id="lightBtn" onclick="toggleLight()"><span class="icon-emoji">💡</span></button>
                        <button class="control-btn" id="turnBtn" onmousedown="startTurning()" onmouseup="stopTurning()" ontouchstart="startTurning()" ontouchend="stopTurning()"><span class="icon-emoji">🔄</span></button>
                    </div>
                     <div class="row">
                        <div class="col-lg-6 mb-4">
                            <div class="kulucka-takip-box">
                                <h5><i class='bx bxs-egg'></i> Kuluçka Takibi</h5>
                                <div class="row">
                                    <div class="col-12 col-md-6 mb-2 mb-md-0">Başlangıç: <span id="startDateDisplay" class="ms-2 fw-bold">--/--/----</span></div>
                                    <div class="col-12 col-md-6">Geçen Süre: <span id="elapsedDays" class="ms-2 fw-bold">--</span> Gün</div>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-6 mb-4">
                            <div class="cihaz-durumu-box">
                                <h5><i class='bx bx-wifi'></i> Cihaz Durumu</h5>
                                <div class="row">
                                    <div class="col-12 col-md-4 mb-2 mb-md-0">Sinyal: <span id="signalDbm" class="ms-2 fw-bold">--</span> dBm</div>
                                    <div class="col-12 col-md-8">IP: <span id="ipAddress" class="ms-2 fw-bold">--.--.--.--</span></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Ayarlar Sekmesi (Dolduruldu) -->
                <div class="tab-pane fade" id="settings" role="tabpanel" aria-labelledby="settings-tab">
                    <div class="settings-card">
                        <h5><span class="icon-emoji">⚙️</span> Sistem Ayarları</h5>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="setpoint" class="form-label">Hedef Sıcaklık (°C)</label>
                                <input type="number" step="0.1" class="form-control" id="setpoint" value="37.7" min="0" max="100">
                            </div>
                            <div class="col-md-6">
                                <label for="sethum" class="form-label">Hedef Nem (%)</label>
                                <input type="number" step="0.1" class="form-control" id="sethum" value="55.0" min="0" max="100">
                            </div>
                        </div>

                        <div class="mb-3 form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="pid" onchange="toggleOtoPidSection()">
                            <label class="form-check-label" for="pid">PID Kontrol</label>
                        </div>

                        <div id="otoPidSection" class="collapsible-section">
                            <div class="mb-3 form-check form-switch">
                                <input class="form-check-input" type="checkbox" id="otoPid">
                                <label class="form-check-label" for="otoPid">Otomatik PID Ayarı (Oto PID)</label>
                            </div>
                        </div>

                        <div class="mb-4 form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="turnactive" onchange="toggleTurningSettings()">
                            <label class="form-check-label" for="turnactive">Otomatik Çevirme</label>
                        </div>

                        <div id="turningSettingsSection" class="collapsible-section">
                            <div class="row mb-3">
                                <div class="col-md-6 mb-3 mb-md-0">
                                    <label for="turnhour" class="form-label">Çevirme Zamanı</label>
                                    <div class="input-group">
                                        <input type="number" class="form-control" id="turnhour" min="0" max="23" value="2">
                                        <span class="input-group-text">saat</span>
                                        <input type="number" class="form-control" id="turnminute" min="0" max="59" value="0">
                                        <span class="input-group-text">dk</span>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <label for="turndurmin" class="form-label">Çevirme Süresi</label>
                                    <div class="input-group">
                                        <input type="number" class="form-control" id="turndurmin" min="0" max="59" value="0">
                                        <span class="input-group-text">dk</span>
                                        <input type="number" class="form-control" id="turndursec" min="0" max="59" value="15">
                                        <span class="input-group-text">sn</span>
                                    </div>
                                </div>
                            </div>
                            <div class="row mb-4">
                                <div class="col-12">
                                    <label for="autoStopDay" class="form-label">Çevirmeyi Durdurma Günü</label>
                                    <input type="number" class="form-control" id="autoStopDay" min="0" value="18">
                                </div>
                            </div>
                        </div>

                        <div class="row mb-4">
                            <div class="col-12">
                                <label for="startDate" class="form-label">Kuluçka Başlangıç Tarihi</label>
                                <input type="date" class="form-control" id="startDate">
                            </div>
                        </div>

                        <button class="btn btn-primary w-100 ota-update-btn" id="saveSettingsBtn" onclick="setVars()">
                            <i class='bx bx-save button-icon'></i> Ayarları Kaydet
                            <i class='bx bx-loader bx-spin ms-2 d-none' id="saveSettingsSpinner"></i>
                        </button>
                    </div>
                </div>

                <!-- Kalibrasyon Sekmesi (Dolduruldu) -->
                <div class="tab-pane fade" id="calibration" role="tabpanel" aria-labelledby="calibration-tab">
                    <div class="calibration-info-box mb-4">
                        <p>Kalibrasyon, sensör okumalarını gerçek değerlere uyarlamak için kullanılır. Eğer sensörünüz yanlış değerler gösteriyorsa, buradan düzeltme yapabilirsiniz.</p>
                        <p><strong>Örnek:</strong> Sensör 25.0°C gösterirken harici bir termometre 25.5°C gösteriyorsa, Sıcaklık Kalibrasyonuna <strong class="text-success">+0.5</strong> yazmalısınız.</p>
                        <p>Benzer şekilde, Nem sensörü %60 gösterirken gerçek nem %58 ise, Nem Kalibrasyonuna <strong class="text-danger">-2.0</strong> yazmalısınız.</p>
                    </div>

                    <div class="settings-card">
                        <h5><span class="icon-emoji">⚖️</span> Kalibrasyon Ayarları</h5>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="calibtemp" class="form-label">Sıcaklık Kalibrasyonu (°C)</label>
                                <input type="number" step="0.1" class="form-control" id="calibtemp" value="0.0">
                            </div>
                            <div class="col-md-6">
                                <label for="calibhum" class="form-label">Nem Kalibrasyonu (%)</label>
                                <input type="number" step="0.1" class="form-control" id="calibhum" value="0.0">
                            </div>
                        </div>
                        <button class="btn btn-primary w-100 ota-update-btn" id="saveCalibrationBtn" onclick="setCalibration()">
                            <i class='bx bx-save button-icon'></i> Kalibrasyonu Kaydet
                            <i class='bx bx-loader bx-spin ms-2 d-none' id="saveCalibrationSpinner"></i>
                        </button>
                    </div>
                </div>
                
                <!-- Sistem Sekmesi (Dolduruldu) -->
                <div class="tab-pane fade" id="system" role="tabpanel" aria-labelledby="system-tab">
                    <div class="settings-card mb-4">
                        <h5><span class="icon-emoji">🔔</span> Alarm Ayarları</h5>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="alarmMaxTemp" class="form-label">Maksimum Sıcaklık (°C)</label>
                                <input type="number" step="0.1" class="form-control" id="alarmMaxTemp" value="40.0">
                            </div>
                            <div class="col-md-6">
                                <label for="alarmMinTemp" class="form-label">Minimum Sıcaklık (°C)</label>
                                <input type="number" step="0.1" class="form-control" id="alarmMinTemp" value="35.0">
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="alarmMaxHum" class="form-label">Maksimum Nem (%)</label>
                                <input type="number" step="0.1" class="form-control" id="alarmMaxHum" value="70.0">
                            </div>
                            <div class="col-md-6">
                                <label for="alarmMinHum" class="form-label">Minimum Nem (%)</label>
                                <input type="number" step="0.1" class="form-control" id="alarmMinHum" value="40.0">
                            </div>
                        </div>
                        <div class="mb-4 form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="alarmEnabled">
                            <label class="form-check-label" for="alarmEnabled">Alarm Aktif</label>
                        </div>
                        <button class="btn btn-primary w-100 ota-update-btn" id="saveAlarmSettingsBtn" onclick="setAlarmSettings()">
                            <i class='bx bx-save button-icon'></i> Alarm Ayarlarını Kaydet
                            <i class='bx bx-loader bx-spin ms-2 d-none' id="saveAlarmSettingsSpinner"></i>
                        </button>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <button class="btn btn-warning w-100 ota-update-btn" id="resetFactoryBtn" onclick="showConfirmationModal('Fabrika Ayarlarına Sıfırla', 'Tüm ayarlar fabrika ayarlarına sıfırlanacak. Emin misiniz?', resetFactoryDefaults)">
                                <span class="icon-emoji button-icon">♻️</span> Fabrika Ayarlarına Dön
                            </button>
                        </div>
                        <div class="col-md-6 mb-3">
                            <button class="btn btn-danger w-100 ota-update-btn" id="restartDeviceBtn" onclick="showConfirmationModal('Cihazı Yeniden Başlat', 'Cihazı yeniden başlatmak istediğinizden emin misiniz?', restartDevice)">
                                <span class="icon-emoji button-icon">🔁</span> Cihazı Yeniden Başlat
                            </button>
                        </div>
                    </div>
                </div>


                <!-- Bilgi Sekmesi (Yeniden Tasarlandı) -->
                <div class="tab-pane fade" id="info" role="tabpanel" aria-labelledby="info-tab">
                    <div class="info-page-card">
                        <div class="company-logo">
                            <i class='bx bxl-sketch'></i>
                        </div>
                        <div class="company-name">
                            ÇAKIR OTOMASYON
                        </div>

                        <div class="contact-grid">
                            <div class="contact-item">
                                <i class='bx bxs-user-circle'></i>
                                <span class="contact-label">Mehmet ÇAKIR</span>
                            </div>
                            <div class="contact-item">
                                <i class='bx bxs-phone-call'></i>
                                <a href="tel:+905363289962">0536 328 99 62</a>
                            </div>
                            <div class="contact-item">
                                <i class='bx bxs-envelope'></i>
                                <a href="mailto:myfavoritess@gmail.com">myfavoritess@gmail.com</a>
                            </div>
                        </div>

                        <div class="ota-btn-container">
                            <p class="text-muted mt-3">Cihaz yazılımınızı buradan güncelleyebilirsiniz.</p>
                            <button class="ota-update-btn btn btn-primary" id="otaUpdateBtn" onclick="startOtaUpdate()">
                                <i class='bx bx-cloud-download button-icon'></i> OTA Güncelleme Başlat
                                <i class='bx bx-loader bx-spin ms-2 d-none' id="otaUpdateSpinner"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Alt Bilgi (Footer) -->
    <footer class="footer">
        <div class="container">
            Geliştirilmiş (Canvas) Sürüm V.1.3
        </div>
    </footer>


    <!-- Onay Modalı Yapısı (Dolduruldu) -->
    <div class="modal fade" id="confirmationModal" tabindex="-1" aria-labelledby="confirmationModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content rounded-3 shadow-lg">
                <div class="modal-header bg-primary text-white rounded-top-3">
                    <h5 class="modal-title" id="confirmationModalLabel"></h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body text-center py-4">
                    <p id="confirmationModalMessage" class="lead"></p>
                </div>
                <div class="modal-footer d-flex justify-content-around p-3">
                    <button type="button" class="btn btn-secondary rounded-pill px-4" data-bs-dismiss="modal">İptal</button>
                    <button type="button" class="btn btn-primary rounded-pill px-4" id="confirmActionButton">Onayla</button>
                </div>
            </div>
        </div>
    </div>
    <!-- Toast Konteyneri -->
    <div class="toast-container"></div>

    <!-- Bootstrap ve JavaScript (Tamamı Eklendi ve Hata Giderildi) -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Kök değişkenler
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : '';
        
        // HATA DÜZELTME: Önizleme ortamını tespit et
        const isPreview = !window.location.protocol.startsWith('http');

        let lightState = false;
        let turnState = false;
        let confirmActionCallback = null;

        /**
         * Belirli bir butonda yükleme spinner'ını gösterir veya gizler.
         */
        function toggleLoading(buttonId, show) {
            const button = document.getElementById(buttonId);
            if (!button) return;
            const spinner = button.querySelector('.bx-loader');
            const icon = button.querySelector('.button-icon, .icon-emoji');

            if (spinner) {
                if (show) {
                    spinner.classList.remove('d-none');
                    if (icon) icon.classList.add('d-none');
                    button.disabled = true;
                } else {
                    spinner.classList.add('d-none');
                    if (icon) icon.classList.remove('d-none');
                    button.disabled = false;
                }
            }
        }

        /**
         * Onay modalını gösterir ve bir eylem için onay ister.
         */
        function showConfirmationModal(title, message, onConfirm) {
            const modalElement = document.getElementById('confirmationModal');
            const modalTitle = document.getElementById('confirmationModalLabel');
            const modalMessage = document.getElementById('confirmationModalMessage');
            const confirmBtn = document.getElementById('confirmActionButton');

            modalTitle.textContent = title;
            modalMessage.textContent = message;
            confirmActionCallback = onConfirm; 

            confirmBtn.onclick = () => {
                if (confirmActionCallback) confirmActionCallback();
                bootstrap.Modal.getInstance(modalElement)?.hide();
            };
            new bootstrap.Modal(modalElement).show();
        }

        /**
         * Kullanıcıya bildirim (toast) mesajı gösteren fonksiyon
         */
        function showToast(message, type = 'info') {
            const toastContainer = document.querySelector('.toast-container');
            const toastElement = document.createElement('div');
            toastElement.className = `toast align-items-center text-white bg-${type} border-0`;
            toastElement.setAttribute('role', 'alert');
            toastElement.setAttribute('aria-live', 'assertive');
            toastElement.setAttribute('aria-atomic', 'true');
            
            let iconClass = 'bxs-info-circle';
            if (type === 'success') iconClass = 'bxs-check-circle';
            if (type === 'danger') iconClass = 'bxs-error-circle';
            if (type === 'warning') iconClass = 'bxs-bell';

            toastElement.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body"><i class='bx ${iconClass} me-2'></i>${message}</div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            `;
            toastContainer.appendChild(toastElement);
            const bootstrapToast = new bootstrap.Toast(toastElement, { delay: 4000 });
            bootstrapToast.show();
            toastElement.addEventListener('hidden.bs.toast', () => toastElement.remove());
        }

        /**
         * Backend'den (ESP32) değişkenleri çeken fonksiyon
         */
        async function fetchVars() {
            // HATA DÜZELTME: Önizlemedeysek fetch yapma
            if (isPreview) {
                return;
            }
            try {
                const response = await fetch('/get');
                if (!response.ok) throw new Error(`HTTP hatası! Durum: ${response.status}`);
                const data = await response.json();

                // Gelen verileri HTML elemanlarına yerleştir
                document.getElementById('currentTemp').textContent = data.currentTemp?.toFixed(1) + '°C' ?? '--.--°C';
                document.getElementById('currentHum').textContent = data.currentHum?.toFixed(1) + '%' ?? '--.--%';
                document.getElementById('setpoint').value = data.setpoint ?? '37.7';
                document.getElementById('sethum').value = data.sethum ?? '55.0';
                document.getElementById('pid').checked = data.pid === 1;
                document.getElementById('otoPid').checked = data.otoPid === 1;
                document.getElementById('turnactive').checked = data.turnactive === 1;
                document.getElementById('turnhour').value = data.turnhour ?? '2';
                document.getElementById('turnminute').value = data.turnminute ?? '0';
                document.getElementById('turndurmin').value = data.turndurmin ?? '0';
                document.getElementById('turndursec').value = data.turndursec ?? '15';
                document.getElementById('calibtemp').value = data.calibtemp ?? '0.0';
                document.getElementById('calibhum').value = data.calibhum ?? '0.0';
                document.getElementById('alarmMaxTemp').value = data.alarmMaxTemp ?? '40.0';
                document.getElementById('alarmMinTemp').value = data.alarmMinTemp ?? '35.0';
                document.getElementById('alarmMaxHum').value = data.alarmMaxHum ?? '70.0';
                document.getElementById('alarmMinHum').value = data.alarmMinHum ?? '40.0';
                document.getElementById('alarmEnabled').checked = data.alarmEnabled === 1;
                lightState = data.light === 1;
                updateLightButtonState();
                document.getElementById('signalDbm').textContent = data.rssi ?? '--';
                document.getElementById('ipAddress').textContent = data.ipAddress ?? '--.--.--.--';
                if (data.startDate) {
                    document.getElementById('startDate').value = data.startDate;
                    document.getElementById('startDateDisplay').textContent = new Date(data.startDate).toLocaleDateString('tr-TR');
                }
                document.getElementById('autoStopDay').value = data.autoStopDay ?? '18';
                
                // Durumları güncelle
                updateDayCounter();
                toggleOtoPidSection();
                toggleTurningSettings();

            } catch (error) {
                console.error('Veri çekme hatası:', error);
                // HATA DÜZELTME: Kullanıcıya bilgi ver
                showToast('Cihazla bağlantı kurulamadı. Veriler güncellenemiyor.', 'warning');
            }
        }

        function updateLightButtonState() {
            document.getElementById('lightBtn').classList.toggle('active', lightState);
        }

        async function toggleLight() {
            // HATA DÜZELTME: Önizlemedeysek arayüzü simüle et
            if (isPreview) {
                lightState = !lightState;
                updateLightButtonState();
                showToast(`Önizleme: Işık ${lightState ? 'açıldı' : 'kapatıldı'}.`, 'info');
                return;
            }
            lightState = !lightState;
            try {
                await fetch('/light?light=' + (lightState ? '1' : '0'));
                updateLightButtonState();
                showToast(`Aydınlatma ${lightState ? 'açıldı' : 'kapatıldı'}.`, 'success');
            } catch (error) {
                lightState = !lightState; // Hata durumunda geri al
                updateLightButtonState();
                showToast('Işık kontrol hatası: ' + error.message, 'danger');
            }
        }

        async function startTurning() {
            if (turnState) return;
            turnState = true;
            document.getElementById('turnBtn').classList.add('active');
            if (isPreview) { showToast('Önizleme: Manuel çevirme başladı.', 'info'); return; }
            try { await fetch('/manualturn?action=1'); } catch (error) { stopTurning(); }
        }

        async function stopTurning() {
            if (!turnState) return;
            turnState = false;
            document.getElementById('turnBtn').classList.remove('active');
            if (isPreview) { showToast('Önizleme: Manuel çevirme durdu.', 'info'); return; }
            try { await fetch('/manualturn?action=0'); } catch (error) { /* ignore */ }
        }

        async function setVars() {
            if (isPreview) { showToast('Ayarlar kaydedildi (Önizleme).', 'success'); return; }
            toggleLoading('saveSettingsBtn', true);
            const formData = new FormData();
            ['setpoint', 'sethum', 'pid', 'otoPid', 'turnactive', 'turnhour', 'turnminute', 'turndurmin', 'turndursec', 'startDate', 'autoStopDay'].forEach(id => {
                const el = document.getElementById(id);
                if (el) formData.append(id, el.type === 'checkbox' ? (el.checked ? '1' : '0') : el.value);
            });
            try {
                await fetch('/set', { method: 'POST', body: formData });
                showToast('Ayarlar başarıyla kaydedildi.', 'success');
                fetchVars();
            } catch (error) {
                showToast('Ayarlar kaydedilemedi: ' + error.message, 'danger');
            } finally {
                toggleLoading('saveSettingsBtn', false);
            }
        }
        
        async function setCalibration() {
            if (isPreview) { showToast('Kalibrasyon kaydedildi (Önizleme).', 'success'); return; }
            toggleLoading('saveCalibrationBtn', true);
            const formData = new FormData();
            formData.append('calibtemp', document.getElementById('calibtemp').value);
            formData.append('calibhum', document.getElementById('calibhum').value);
            try {
                await fetch('/set', { method: 'POST', body: formData });
                showToast('Kalibrasyon ayarları kaydedildi.', 'success');
                fetchVars();
            } catch (error) {
                showToast('Kalibrasyon kaydedilemedi: ' + error.message, 'danger');
            } finally {
                toggleLoading('saveCalibrationBtn', false);
            }
        }

        async function startOtaUpdate() {
            if (isPreview) { showToast('OTA güncellemesi başlatıldı (Önizleme).', 'info'); return; }
            toggleLoading('otaUpdateBtn', true);
            showToast('OTA Güncellemesi başlatılıyor...', 'info');
            try {
                await fetch('/ota_update');
                showToast('OTA Güncelleme isteği gönderildi.', 'success');
            } catch (error) {
                showToast('OTA Güncelleme başlatılamadı: ' + error.message, 'danger');
            } finally {
                toggleLoading('otaUpdateBtn', false);
            }
        }
        
        async function setAlarmSettings() {
            if (isPreview) { showToast('Alarm ayarları kaydedildi (Önizleme).', 'success'); return; }
            toggleLoading('saveAlarmSettingsBtn', true);
            const formData = new FormData();
            formData.append('alarmMaxTemp', document.getElementById('alarmMaxTemp').value);
            formData.append('alarmMinTemp', document.getElementById('alarmMinTemp').value);
            formData.append('alarmMaxHum', document.getElementById('alarmMaxHum').value);
            formData.append('alarmMinHum', document.getElementById('alarmMinHum').value);
            formData.append('alarmEnabled', document.getElementById('alarmEnabled').checked ? '1' : '0');
            try {
                await fetch('/set', { method: 'POST', body: formData });
                showToast('Alarm ayarları kaydedildi.', 'success');
                fetchVars();
            } catch (err) {
                showToast('Alarm ayarları kaydedilemedi: ' + err.message, 'danger');
            } finally {
                toggleLoading('saveAlarmSettingsBtn', false);
            }
        }

        async function resetFactoryDefaults() {
            if (isPreview) { showToast('Fabrika ayarlarına dönüldü (Önizleme).', 'warning'); return; }
            try { await fetch('/reset', { method: 'POST' }); showToast('Fabrika ayarlarına dönüldü.', 'warning'); } 
            catch (err) { showToast('Sıfırlama hatası: ' + err.message, 'danger'); }
        }

        async function restartDevice() {
            if (isPreview) { showToast('Cihaz yeniden başlatılıyor (Önizleme).', 'info'); return; }
            showToast('Cihaz yeniden başlatılıyor...', 'info');
            try { await fetch('/restart'); } 
            catch (err) { showToast('Yeniden başlatılamadı: ' + err.message, 'danger'); }
        }

        // --- Arayüz Yardımcı Fonksiyonları ---
        function updateDateTime() {
            document.getElementById('currentTime').textContent = new Date().toLocaleTimeString('tr-TR');
            updateDayCounter();
        }

        function updateDayCounter() {
            const startDateInput = document.getElementById('startDate').value;
            const elapsedDaysSpan = document.getElementById('elapsedDays');
            if (startDateInput) {
                const diffTime = Math.abs(new Date() - new Date(startDateInput));
                const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
                elapsedDaysSpan.textContent = diffDays;
            } else {
                elapsedDaysSpan.textContent = '--';
            }
        }

        function toggleOtoPidSection() {
            document.getElementById('otoPidSection').classList.toggle('show', document.getElementById('pid').checked);
        }

        function toggleTurningSettings() {
            document.getElementById('turningSettingsSection').classList.toggle('show', document.getElementById('turnactive').checked);
        }
        
        // --- Sayfa Yüklendiğinde Çalışacak Kod ---
        document.addEventListener('DOMContentLoaded', () => {
            if (isPreview) {
                showToast('Önizleme Modu Aktif. Cihaz bağlantısı yok.', 'info');
            }
            fetchVars(); 
            updateDateTime();
            
            toggleOtoPidSection();
            toggleTurningSettings();
            
            setInterval(updateDateTime, 1000);
            setInterval(fetchVars, 5000);
        });
    </script>
</body>
</html>
